"use strict";(self.webpackChunktippy_vue=self.webpackChunktippy_vue||[]).push([[373],{2723:function(t,n,a){a.r(n),a.d(n,{data:function(){return s}});const s={key:"v-0a5287a9",path:"/reference/v-tippy.html",title:"v-tippy",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"Inline mode",slug:"inline-mode",children:[]},{level:2,title:"Target mode",slug:"target-mode",children:[]}],filePathRelative:"reference/v-tippy.md",git:{updatedTime:1656279716e3,contributors:[{name:"Pierce Corcoran",email:"pierce.corcoran@dfstudio.com",commits:2}]}}},3526:function(t,n,a){a.r(n),a.d(n,{default:function(){return F}});var s=a(6252);const e=(0,s.uE)('<h1 id="v-tippy" tabindex="-1"><a class="header-anchor" href="#v-tippy" aria-hidden="true">#</a> <code>v-tippy</code></h1><p>The <code>v-tippy</code> directive has two &quot;modes&quot;, which are determined when the directive is first mounted. If the directive has no value (e.g. <code>&lt;div v-tippy&gt;</code>) it starts up in <a href="#target-mode">&quot;target mode&quot;</a>, otherwise it starts up in <a href="#inline-mode">&quot;inline mode&quot;</a>.</p><h2 id="inline-mode" tabindex="-1"><a class="header-anchor" href="#inline-mode" aria-hidden="true">#</a> Inline mode</h2>',3),p=(0,s.Uk)("The "),o=(0,s._)("code",null,"v-tippy",-1),c=(0,s.Uk)(" directive can be used to define a tooltip in-line, either as a string or a "),l={href:"https://atomiks.github.io/tippyjs/v6/all-props/",target:"_blank",rel:"noopener noreferrer"},u=(0,s.Uk)("Tippy.js props object"),i=(0,s.Uk)(". The tooltip will automatically update if the text or any of the props change."),r=[(0,s.Uk)("Static text")],k=[(0,s.Uk)("Dynamic text")],d=[(0,s.Uk)("Props object")],g=(0,s.uE)('<div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-tippy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>&lt;strong&gt;Static text&lt;/strong&gt;<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Static text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-tippy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>Current time: <span class="token punctuation">&#39;</span> + seconds<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Dynamic text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-tippy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{content: `Seconds: ${seconds}`, placement: <span class="token punctuation">&#39;</span>right<span class="token punctuation">&#39;</span>}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Props object<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',1),m=(0,s.Uk)("Like the Tippy.js "),h={href:"https://atomiks.github.io/tippyjs/v6/html-content/#string",target:"_blank",rel:"noopener noreferrer"},v=(0,s._)("code",null,"content",-1),y=(0,s.Uk)(" option"),f=(0,s.Uk)(", make sure HTML strings containing user data are sanitized properly to prevent XSS attacks. For cases involving user data the "),b=(0,s._)("code",null,"<tippy>",-1),_=(0,s.Uk)(" component will likely be safer and more convenient."),w=(0,s._)("h2",{id:"target-mode",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#target-mode","aria-hidden":"true"},"#"),(0,s.Uk)(" Target mode")],-1),U=(0,s.Uk)("When started up in target mode, the directive marks itself as a target for the "),q=(0,s._)("code",null,"<tippy>",-1),x=(0,s.Uk)(" component"),T=(0,s.Uk)(". Note that "),S=(0,s._)("code",null,"<tippy>",-1),W=(0,s.Uk)(" components won't automatically respond when the marker is updated, so in most cases a dynamic argument won't work. Internally, the element is marked with "),D=(0,s._)("code",null,'data-tippy-target="arg"',-1),j=(0,s.Uk)("."),C=(0,s.Uk)("The details of how "),N=(0,s._)("code",null,"<tippy>",-1),I=(0,s.Uk)(" binds to this marker are covered in the "),L=(0,s._)("code",null,"<tippy>",-1),P=(0,s.Uk)(" docs"),E=(0,s.Uk)("."),H=[(0,s.Uk)("Default marker")],O=(0,s.Uk)("Default target"),R=[(0,s.Uk)("Named marker")],Z=(0,s.Uk)("Named target"),$=(0,s.uE)('<div class="language-vue ext-vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-tippy</span><span class="token punctuation">&gt;</span></span>Default marker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- Defaults to &quot;&quot; --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tippy</span><span class="token punctuation">&gt;</span></span>Default target<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tippy</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-tippy:</span>name</span><span class="token punctuation">&gt;</span></span>Named marker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tippy</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Named target<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tippy</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div>',1),z={};var F=(0,a(3744).Z)(z,[["render",function(t,n){const a=(0,s.up)("OutboundLink"),z=(0,s.up)("demo"),F=(0,s.up)("RouterLink"),M=(0,s.up)("tippy"),Q=(0,s.Q2)("tippy");return(0,s.wg)(),(0,s.iD)(s.HY,null,[e,(0,s._)("p",null,[p,o,c,(0,s._)("a",l,[u,(0,s.Wm)(a)]),i]),(0,s.Wm)(z,null,{default:(0,s.w5)((({seconds:t})=>[(0,s.wy)((0,s._)("button",null,r,512),[[Q,"<strong>Static text</strong>"]]),(0,s.wy)((0,s._)("button",null,k,512),[[Q,"Current time: "+t]]),(0,s.wy)((0,s._)("button",null,d,512),[[Q,{content:`Seconds: ${t}`,placement:"right"}]])])),_:1}),g,(0,s._)("p",null,[m,(0,s._)("a",h,[v,y,(0,s.Wm)(a)]),f,b,_]),w,(0,s._)("p",null,[U,(0,s.Wm)(F,{to:"/reference/tippy.html"},{default:(0,s.w5)((()=>[q,x])),_:1}),T,S,W,D,j]),(0,s._)("p",null,[C,N,I,(0,s.Wm)(F,{to:"/reference/tippy.html#target-binding"},{default:(0,s.w5)((()=>[L,P])),_:1}),E]),(0,s.Wm)(z,null,{default:(0,s.w5)((()=>[(0,s.wy)((0,s._)("button",null,H,512),[[Q]]),(0,s.Wm)(M,null,{default:(0,s.w5)((()=>[O])),_:1}),(0,s.wy)((0,s._)("button",null,R,512),[[Q,void 0,"name"]]),(0,s.Wm)(M,{target:"name"},{default:(0,s.w5)((()=>[Z])),_:1})])),_:1}),$],64)}]])},3744:function(t,n){n.Z=(t,n)=>{const a=t.__vccOpts||t;for(const[t,s]of n)a[t]=s;return a}}}]);