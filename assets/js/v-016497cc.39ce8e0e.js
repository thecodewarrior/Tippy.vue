"use strict";(self.webpackChunktippy_vue=self.webpackChunktippy_vue||[]).push([[828],{4338:function(n,s,e){e.r(s),e.d(s,{data:function(){return a}});const a={key:"v-016497cc",path:"/reference/code-completion.html",title:"Code Completion",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"VS Code",slug:"vs-code",children:[{level:3,title:"Vetur",slug:"vetur",children:[]},{level:3,title:"Volar",slug:"volar",children:[]}]},{level:2,title:"IntelliJ IDEA",slug:"intellij-idea",children:[{level:3,title:"web-types.json",slug:"web-types-json",children:[]},{level:3,title:"GlobalComponents",slug:"globalcomponents",children:[]}]}],filePathRelative:"reference/code-completion.md",git:{updatedTime:164800135e4,contributors:[{name:"Pierce Corcoran",email:"pierce.corcoran@dfstudio.com",commits:1}]}}},6298:function(n,s,e){e.r(s),e.d(s,{default:function(){return E}});var a=e(6252);const t=(0,a.uE)('<h1 id="code-completion" tabindex="-1"><a class="header-anchor" href="#code-completion" aria-hidden="true">#</a> Code Completion</h1><p>Tippy.vue supports code completion in VS Code using either Vetur or Volar, and in IntelliJ IDEA using their first-party Vue plugin. In both IDEs the autocomplete may not appear until you close and reopen the project.</p><h2 id="vs-code" tabindex="-1"><a class="header-anchor" href="#vs-code" aria-hidden="true">#</a> VS Code</h2><h3 id="vetur" tabindex="-1"><a class="header-anchor" href="#vetur" aria-hidden="true">#</a> Vetur</h3>',4),o=(0,a.Uk)("Tippy.vue includes Vetur's "),p={href:"https://vuejs.github.io/vetur/guide/component-data.html#workspace-component-data",target:"_blank",rel:"noopener noreferrer"},r=(0,a._)("code",null,"attributes.json",-1),l=(0,a.Uk)(" and "),c=(0,a._)("code",null,"tags.json",-1),i=(0,a.Uk)(" files, so it should work out of the box. Vetur's system is much more rudimentary than JetBrains' web-types or "),u=(0,a._)("code",null,"GlobalComponents",-1),k=(0,a.Uk)(", so it doesn't have any type information and custom props won't be recognized."),d=(0,a._)("h3",{id:"volar",tabindex:"-1"},[(0,a._)("a",{class:"header-anchor",href:"#volar","aria-hidden":"true"},"#"),(0,a.Uk)(" Volar")],-1),y=(0,a.Uk)("Volar supports directly reading component definitions from TypeScript definitions, a la "),h={href:"https://github.com/vuejs/core/pull/3399",target:"_blank",rel:"noopener noreferrer"},m=(0,a.Uk)("vuejs/core#3399"),f=(0,a.Uk)(", so it has full support for custom properties. Just add a "),g=(0,a._)("code",null,".d.ts",-1),w=(0,a.Uk)(" file to your project with this content:"),v=(0,a.uE)('<div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>TippyComponentType<span class="token punctuation">,</span> TippySingletonComponentType<span class="token punctuation">,</span> TippyDirective<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tippy.vue&#39;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;@vue/runtime-core&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">{</span>\n    Tippy<span class="token operator">:</span> TippyComponentType\n    TippySingleton<span class="token operator">:</span> TippySingletonComponentType\n  <span class="token punctuation">}</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>\n    vTippy<span class="token operator">:</span> <span class="token keyword">typeof</span> TippyDirective\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre></div><p>If you have custom props you can add them as well. Just pass an array of them <code>[typeof prop1, typeof prop2, ...]</code> as the first type parameter of the <code>TippyComponentType</code> and <code>TippySingletonType</code> types. If you aren&#39;t using the full set of default props you&#39;ll have to update the second type parameter to reflect that.</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>customProp<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./wherever&#39;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>TippyComponentType<span class="token punctuation">,</span> TippySingletonComponentType<span class="token punctuation">,</span> TippyDirective<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tippy.vue&#39;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;@vue/runtime-core&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">{</span>\n    Tippy<span class="token operator">:</span> TippyComponentType<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">typeof</span> customProp<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n    TippySingleton<span class="token operator">:</span> TippySingletonComponentType<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">typeof</span> customProp<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentCustomProperties</span> <span class="token punctuation">{</span>\n    vTippy<span class="token operator">:</span> <span class="token keyword">typeof</span> TippyDirective\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre></div><h2 id="intellij-idea" tabindex="-1"><a class="header-anchor" href="#intellij-idea" aria-hidden="true">#</a> IntelliJ IDEA</h2><h3 id="web-types-json" tabindex="-1"><a class="header-anchor" href="#web-types-json" aria-hidden="true">#</a> web-types.json</h3>',5),b=(0,a.Uk)("Tippy.vue supports JetBrains' "),T={href:"https://github.com/JetBrains/web-types",target:"_blank",rel:"noopener noreferrer"},C=(0,a._)("code",null,"web-types.json",-1),_=(0,a.Uk)(", and should work out of the box in IntelliJ IDEA version 2021.3.1 or later. The web-types file includes documentation for each property as well as detailed typechecking information (including autocomplete for the valid "),x=(0,a._)("code",null,"position",-1),P=(0,a.Uk)(" prop values)"),I=(0,a.Uk)("If the web-types still aren't working for you, it may be an issue with the IDE's indexing. See "),j={href:"https://github.com/JetBrains/web-types/issues/27#issuecomment-768307294",target:"_blank",rel:"noopener noreferrer"},S=(0,a.Uk)("this web-types issue"),U=(0,a.Uk)(" for details."),D=(0,a.uE)('<h3 id="globalcomponents" tabindex="-1"><a class="header-anchor" href="#globalcomponents" aria-hidden="true">#</a> GlobalComponents</h3><p>The Vue plugin for IntelliJ IDEA 2022.1 EAP and later has support for <code>GlobalComponents</code>, which provides better custom property support. It works the same as in <a href="#volar">Volar</a> but with a few caveats.</p><ul><li>Directives using <code>ComponentCustomProperties</code> aren&#39;t supported, but the <code>web-types.json</code> should act as a fallback for that.</li><li>The <code>web-types.json</code> file will still be used by the IDE, so removing a built-in property from the type in <code>GlobalComponents</code> won&#39;t reflect in the code completion. You can still overwrite a property, however.</li><li>When adding props, IDEA doesn&#39;t appear to support <code>typeof customProp</code>, even if you explicitly specify the type of the <code>customProp</code> variable.</li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>PropType<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@vue/runtime-core&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>TippyComponentType<span class="token punctuation">,</span> TippySingletonComponentType<span class="token punctuation">,</span> Plugin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;tippy.vue&#39;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">CustomPropPlugin</span> <span class="token operator">=</span> Plugin<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token comment">// can&#39;t use `typeof customProp`</span>\n  custom<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> PropType<span class="token operator">&lt;</span><span class="token string">&quot;off&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;slow&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;fast&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">&#39;@vue/runtime-core&#39;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">GlobalComponents</span> <span class="token punctuation">{</span>\n    Tippy<span class="token operator">:</span> TippyComponentType<span class="token operator">&lt;</span><span class="token punctuation">[</span>CustomPropPlugin<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n    TippySingleton<span class="token operator">:</span> TippySingletonComponentType<span class="token operator">&lt;</span><span class="token punctuation">[</span>CustomPropPlugin<span class="token punctuation">]</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n</code></pre></div>',4),V={};var E=(0,e(3744).Z)(V,[["render",function(n,s){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[t,(0,a._)("p",null,[o,(0,a._)("a",p,[r,l,c,(0,a.Wm)(e)]),i,u,k]),d,(0,a._)("p",null,[y,(0,a._)("a",h,[m,(0,a.Wm)(e)]),f,g,w]),v,(0,a._)("p",null,[b,(0,a._)("a",T,[C,(0,a.Wm)(e)]),_,x,P]),(0,a._)("p",null,[I,(0,a._)("a",j,[S,(0,a.Wm)(e)]),U]),D],64)}]])},3744:function(n,s){s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}}}]);